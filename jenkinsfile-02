node {
    def mavenHome = tool name: 'maven3.9'
    try {
        stage('1.GetCode') {
            git "https://github.com/NdumLab/maven-web-application-1.git"
        }
        stage('2.Test & Build') {
            sh "${mavenHome}/bin/mvn clean package"
        }
        stage('3.Code Quality Analysis') {
            sh "${mavenHome}/bin/mvn sonar:sonar"
        }
        stage('4.Push Artifacts to Nexus') {
            sh "${mavenHome}/bin/mvn deploy"
        }
        stage('5.Ansible Docker Build and Push') {
            sh '''
            ansible-playbook -i your_inventory_file.ini your_docker_build_and_push_playbook.yml
            '''
        }
        stage('6.Ansible Kubernetes Deployment to UAT') {
            sh '''
            ansible-playbook -i your_inventory_file.ini your_k8s_uat_deployment_playbook.yml
            '''
        }
        stage('7.Approval') {
            sh "echo 'Application ready for review'"
            timeout(time: 5, unit: 'HOURS') {
                input message: 'Application ready for review please review and approve'
            }
        }
        stage('8.Ansible Kubernetes Deployment to Production') {
            sh '''
            ansible-playbook -i your_inventory_file.ini your_k8s_prod_deployment_playbook.yml
            '''
        }
    } catch (Exception e) {
        println "Caught exception: ${e.getMessage()}"
        emailext(
            to: 'dev-team@example.com',
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: """<p>Something went wrong with ${env.JOB_NAME} [${env.BUILD_NUMBER}] (<a href='${env.BUILD_URL}'>Open</a>)</p>""",
            mimeType: 'text/html'
        )
        currentBuild.result = 'FAILURE'
        throw e
    }
}
